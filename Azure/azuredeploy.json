{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Admin username for VM"
      }
    },
    "numberOfmasterInstances": {
      "type": "int",
      "defaultValue": 1,
      "allowedValues": [
          1,
          3,
          5
      ],
      "metadata": {
        "description": "Number of master VMs to deploy, limit 5 since this sample is using a single storage account"
      }
    },
    "numberOfworkerInstances": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "Number of worker VMs to deploy, limit 5 since this sample is using a single storage account"
      }
    },
    "authenticationType": {
      "type": "string",
      "defaultValue": "password",
      "allowedValues": [
        "password",
        "sshPublicKey"
      ],
      "metadata": {
        "description": "Type of authentication to use on the Virtual Machine."
      }
    },
    "adminPasswordOrKey": {
      "type": "securestring",
      "metadata": {
        "description": "Password or ssh key for the Virtual Machine."
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_A2_v2",
      "metadata": {
        "description": "Size for the Virtual Machine."
      }
    },
    "virtualNetworkNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "Determines whether or not a new virtual network should be provisioned."
      }
    },
    "virtualNetworkName": {
      "type": "string",
      "defaultValue": "KubernetesVnet",
      "metadata": {
        "description": "Name of the virtual network"
      }
    },
    "addressPrefixes": {
      "type": "array",
      "defaultValue": [
        "10.0.0.0/16"
      ],
      "metadata": {
        "description": "Address prefix of the virtual network"
      }
    },
    "subnetName": {
      "type": "string",
      "defaultValue": "default",
      "metadata": {
        "description": "Name of the subnet"
      }
    },
    "subnetPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/24",
      "metadata": {
        "description": "Subnet prefix of the virtual network"
      }
    },
    "PrivateLBIP": {
      "type": "string",
      "defaultValue": "10.0.0.50",
      "metadata": {
        "description": "Private IP for Internal Load balancer"
      }
    },
    "virtualNetworkResourceGroupName": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "Name of the resource group for the existing virtual network"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    }
  },
  "variables": {
    "masterAVset": "masteravSet",
    "workerAVset": "workeravSet",
    "InternalloadBalancerName": "master-intlb",
    "externalloadBalancerName": "master-extlb",
    "publicIPAddressName": "masterlb-ip",
    "publicIPAddressType": "Dynamic",
    "publicIPAddressID": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]",
    "extlbID": "[resourceId('Microsoft.Network/loadBalancers',variables('externalloadBalancerName'))]",
    "lbID": "[resourceId('Microsoft.Network/loadBalancers', variables('InternalloadBalancerName'))]",
    "linuxConfiguration": {
      "disablePasswordAuthentication": true,
      "ssh": {
        "publicKeys": [
          {
            "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
            "keyData": "[parameters('adminPasswordOrKey')]"
          }
        ]
      }
    },
     "Ubuntu": {
      "publisher": "Canonical",
      "offer": "UbuntuServer",
      "sku": "18.04-LTS",
      "version": "latest"
    },
    "subnetRef": "[resourceId(parameters('virtualNetworkResourceGroupName'), 'Microsoft.Network/virtualNetworks/subnets/', parameters('virtualNetworkName'), parameters('subnetName'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('masterAVset')]",
      "apiVersion": "2016-04-30-preview",
      "location": "[parameters('location')]",
      "properties": {
        "platformFaultDomainCount": 2,
        "platformUpdateDomainCount": 10,
        "managed": true
      }
    },
    {
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('workerAVset')]",
      "apiVersion": "2016-04-30-preview",
      "location": "[parameters('location')]",
      "properties": {
        "platformFaultDomainCount": 2,
        "platformUpdateDomainCount": 10,
        "managed": true
      }
    },
        {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIPAddressName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAllocationMethod": "[variables('publicIPAddressType')]"
      }
    },
    {
     "condition": "[equals(parameters('virtualNetworkNewOrExisting'), 'new')]",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[parameters('virtualNetworkName')]",
      "apiVersion": "2017-09-01",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": "[parameters('addressPrefixes')]"
        },
        "subnets": [
          {
            "name": "[parameters('subnetName')]",
            "properties": {
              "addressPrefix": "[parameters('subnetPrefix')]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat('master-nic', copyindex())]",
      "apiVersion": "2016-03-30",
      "location": "[parameters('location')]",
      "copy": {
        "name": "nicLoop",
        "count": "[parameters('numberOfmasterInstances')]"
      },
      "dependsOn": [
        "[parameters('virtualNetworkName')]",
        "[variables('InternalloadBalancerName')]",
        "[variables('externalloadBalancerName')]"
       ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnetRef')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(variables('lbID'), '/backendAddressPools/master-vm')]"
                },
                {
                  "id": "[concat(variables('extlbID'), '/backendAddressPools/BackendPool')]"
                }
              ]
            }
          }
        ]
      }
    },{
      "apiVersion": "2015-05-01-preview",
      "name": "[variables('externalloadBalancerName')]",
      "type": "Microsoft.Network/loadBalancers",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "LoadBalancerFrontEnd",
            "properties": {
              "publicIPAddress": {
                "id": "[variables('publicIPAddressID')]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "BackendPool"
          }
        ],
        "loadBalancingRules": [
          {
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('externalloadBalancerName')), '/frontendIpConfigurations/LoadBalancerFrontend')]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('externalloadBalancerName')), '/backendAddressPools/BackendPool')]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('externalloadBalancerName')), '/probes/kube-apiserver')]"
              },
              "protocol": "Tcp",
              "frontendPort": 6443,
              "backendPort": 6443,
              "idleTimeoutInMinutes": 15
            },
            "Name": "allrule"
          }
        ],
        "probes": [
          {
            "properties": {
              "protocol": "Tcp",
              "port": 6443,
              "intervalInSeconds": 15,
              "numberOfProbes": 2
            },
            "name": "kube-apiserver"
          }
        ]
      }
    },
    {
      "apiVersion": "2018-04-01",
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('InternalloadBalancerName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[parameters('virtualNetworkName')]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "properties": {
              "subnet": {
                "id": "[variables('subnetRef')]"
              },
              "privateIPAddress": "[parameters('PrivateLBIP')]",
              "privateIPAllocationMethod": "Static"
            },
            "name": "LoadBalancerFrontend"
          }
        ],
        "backendAddressPools": [
          {
            "name": "master-vm"
          }
        ],
        "loadBalancingRules": [
          {
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('InternalloadBalancerName')), '/frontendIpConfigurations/LoadBalancerFrontend')]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('InternalloadBalancerName')), '/backendAddressPools/master-vm')]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('InternalloadBalancerName')), '/probes/all')]"
              },
              "protocol": "Tcp",
              "frontendPort": 6443,
              "backendPort": 6443,
              "idleTimeoutInMinutes": 15
            },
            "Name": "allrule"
          },
          {
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('InternalloadBalancerName')), '/frontendIpConfigurations/LoadBalancerFrontend')]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('InternalloadBalancerName')), '/backendAddressPools/master-vm')]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('InternalloadBalancerName')), '/probes/kube-apiserver')]"
              },
              "protocol": "Tcp",
              "frontendPort": 2379,
              "backendPort": 2379,
              "idleTimeoutInMinutes": 15
            },
            "Name": "kube-apiserverrule"
          },
          {
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('InternalloadBalancerName')), '/frontendIpConfigurations/LoadBalancerFrontend')]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('InternalloadBalancerName')), '/backendAddressPools/master-vm')]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('InternalloadBalancerName')), '/probes/etcd')]"
              },
              "protocol": "Tcp",
              "frontendPort": 2380,
              "backendPort": 2380,
              "idleTimeoutInMinutes": 15
            },
            "Name": "etcdrule"
          },
          {
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('InternalloadBalancerName')), '/frontendIpConfigurations/LoadBalancerFrontend')]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('InternalloadBalancerName')), '/backendAddressPools/master-vm')]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('InternalloadBalancerName')), '/probes/controlplane')]"
              },
              "protocol": "Tcp",
              "frontendPort": 10250,
              "backendPort": 10250,
              "idleTimeoutInMinutes": 15
            },
            "Name": "controlplanerule"
          },
          {
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('InternalloadBalancerName')), '/frontendIpConfigurations/LoadBalancerFrontend')]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('InternalloadBalancerName')), '/backendAddressPools/master-vm')]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('InternalloadBalancerName')), '/probes/kube-scheduler')]"
              },
              "protocol": "Tcp",
              "frontendPort": 10251,
              "backendPort": 10251,
              "idleTimeoutInMinutes": 15
            },
            "Name": "kube-schedulerrule"
          },
          {
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('InternalloadBalancerName')), '/frontendIpConfigurations/LoadBalancerFrontend')]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('InternalloadBalancerName')), '/backendAddressPools/master-vm')]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('InternalloadBalancerName')), '/probes/kube-controller')]"
              },
              "protocol": "Tcp",
              "frontendPort": 10252,
              "backendPort": 10252,
              "idleTimeoutInMinutes": 15
            },
            "Name": "kube-controllerrule"
          }
        ],
        "probes": [
          {
            "properties": {
              "protocol": "Tcp",
              "port": 6443,
              "intervalInSeconds": 15,
              "numberOfProbes": 2
            },
            "name": "all"
          },
          {
            "properties": {
              "protocol": "Tcp",
              "port": 2379,
              "intervalInSeconds": 15,
              "numberOfProbes": 2
            },
            "name": "kube-apiserver"
          },
          {
            "properties": {
              "protocol": "Tcp",
              "port": 2380,
              "intervalInSeconds": 15,
              "numberOfProbes": 2
            },
            "name": "etcd"
          },
          {
            "properties": {
              "protocol": "Tcp",
              "port": 10250,
              "intervalInSeconds": 15,
              "numberOfProbes": 2
            },
            "name": "controlplane"
          },
          {
            "properties": {
              "protocol": "Tcp",
              "port": 10251,
              "intervalInSeconds": 15,
              "numberOfProbes": 2
            },
            "name": "kube-scheduler"
          },
          {
            "properties": {
              "protocol": "Tcp",
              "port": 10252,
              "intervalInSeconds": 15,
              "numberOfProbes": 2
            },
            "name": "kube-controller"
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat('worker-nic', copyindex())]",
      "apiVersion": "2016-03-30",
      "location": "[parameters('location')]",
      "copy": {
        "name": "nicLoop",
        "count": "[parameters('numberOfworkerInstances')]"
      },
      "dependsOn": [
        "[parameters('virtualNetworkName')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat('master', copyIndex())]",
      "apiVersion": "2016-04-30-preview",
      "location": "[parameters('location')]",
      "copy": {
        "name": "virtualMachineLoop",
        "count": "[parameters('numberOfmasterInstances')]"
      },
      "dependsOn": [
        "nicLoop"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('masterAVset'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[concat('master', copyIndex())]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPasswordOrKey')]",
          "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
        },
        "storageProfile": {
          "imageReference": "[variables('Ubuntu')]",
          "osDisk": {
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat('master-nic', copyindex()))]"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat('worker', copyIndex())]",
      "apiVersion": "2016-04-30-preview",
      "location": "[parameters('location')]",
      "copy": {
        "name": "virtualMachineLoop",
        "count": "[parameters('numberOfworkerInstances')]"
      },
      "dependsOn": [
        "nicLoop"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('workerAVset'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[concat('worker', copyIndex())]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPasswordOrKey')]",
          "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
        },
        "storageProfile": {
          "imageReference": "[variables('Ubuntu')]",
          "osDisk": {
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat('worker-nic', copyindex()))]"
            }
          ]
        }
      }
    }
  ]
}